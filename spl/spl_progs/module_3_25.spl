alias functionNum R1;
alias nameIndex R2;//file name or file table index

if(functionNum==3) then

alias counter R5;
counter=0;
while(counter<=59) do
    if([INODE_TABLE+(counter*16)+1]==nameIndex) then
        break;
    endif;
    counter=counter+1;
endwhile;

if(counter==60) then
    R0=-1;
    return;
endif;

multipush(R1,R2,R5);
R1=4;
R2=counter;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R1,R2,R5);

if(R0==-1) then
    R0=-1;
    return;
endif;

if([INODE_TABLE+(counter*16)]==EXEC) then
    multipush(R1,R2,R5);
    R1=5;
    R2=counter;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R5);

    R0=-1;
    return;
endif;

alias increment R6;
increment=0;
while(increment<=31) do
    if([OPEN_FILE_TABLE+(increment*4)]==-1) then
        break;
    endif;
    increment=increment+1;
endwhile;

if(increment==32) then
    multipush(R1,R2,R5,R6);
    R1=5;
    R2=counter;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R5,R6);

    R0=-2;
    return;
endif;

if([ROOT_FILE+(counter*8)]=="root") then
    [OPEN_FILE_TABLE+(increment*4)]=INODE_ROOT;

else
    if([FILE_STATUS_TABLE+(counter*4)+1]==-1) then
        [FILE_STATUS_TABLE+(counter*4)+1]=1;
    else
         [FILE_STATUS_TABLE+(counter*4)+1]=[FILE_STATUS_TABLE+(counter*4)+1]+1;
    endif;

    [OPEN_FILE_TABLE+(increment*4)]=counter;

endif;

[OPEN_FILE_TABLE+(increment*4)+1]=1;
[OPEN_FILE_TABLE+(increment*4)+2]=0;

multipush(R1,R2,R5,R6);
R1=5;
R2=counter;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R1,R2,R5,R6);

R0=increment;
return;
endif;

if(functionNum==4) then
    alias inode_index R3;
    inode_index=[OPEN_FILE_TABLE+(nameIndex)*4];

    [OPEN_FILE_TABLE+(nameIndex)*4+1]=[OPEN_FILE_TABLE+(nameIndex)*4+1]-1;

    if([OPEN_FILE_TABLE+(nameIndex)*4+1]==0) then
        [OPEN_FILE_TABLE+(nameIndex)*4+0]=-1;
        [OPEN_FILE_TABLE+(nameIndex)*4+1]=-1;
        [OPEN_FILE_TABLE+(nameIndex)*4+2]=-1;

        if([ROOT_FILE+(inode_index)*8]!="root") then
            [FILE_STATUS_TABLE+(inode_index)*4+1]=[FILE_STATUS_TABLE+(inode_index)*4+1]-1;
        endif;

        if([FILE_STATUS_TABLE+(inode_index)*4+1]==0) then
            [FILE_STATUS_TABLE+(inode_index)*4+1]=-1;
        endif;
    endif;
    return;
endif;


if(functionNum==2 || functionNum==1) then
    alias diskblocknumber R2;
    alias offset R3;
    alias memoryaddress R4;
    alias buffernumber R5;
    buffernumber=diskblocknumber%4;

    multipush(R1,R2,R3,R4,R5);
    R1=1;
    R2=buffernumber;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);

    alias save R10;
    save=[BUFFER_TABLE+(buffernumber)*4];

    if([BUFFER_TABLE+(buffernumber)*4]!=diskblocknumber) then
        if([BUFFER_TABLE+(buffernumber)*4+1]==1) then
            multipush(R1,R2,R3,R4,R5,R10);
            R1=1;
            R2=[SYSTEM_STATUS_TABLE+1];
            R3=buffernumber+71;
            R4=save;
            call MOD_4;

            multipop(R1,R2,R3,R4,R5,R10);

            if(functionNum==2) then
                [BUFFER_TABLE+(buffernumber)*4+1]=0;
            endif;
        endif;

        multipush(R1,R2,R3,R4,R5,R10);
        R1=2;
        R4=R2;
        R3=buffernumber+71;
        R2=[SYSTEM_STATUS_TABLE+1];
        call MOD_4;
        multipop(R1,R2,R3,R4,R5,R10);

        [BUFFER_TABLE+(buffernumber)*4]=diskblocknumber;

    endif;

    if(functionNum==2) then
        [([PTBR+2*(memoryaddress)/512]*512)+(memoryaddress)%512]=[(buffernumber+71)*512+offset];
    endif;

    if(functionNum==1) then
        [(buffernumber+71)*512+offset]=memoryaddress;
        [BUFFER_TABLE+(buffernumber)*4+1]=1;
    endif;

    multipush(R1,R2,R3,R4,R5,R10);
    R1=2;
    R2=buffernumber;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R10);
    return;
endif;
