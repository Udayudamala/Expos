[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R15;
userSP = SP;

alias pcbEntry R10;
pcbEntry=PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16);

[pcbEntry + 13] = SP;
SP = [pcbEntry + 11] * 512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
alias wordaddress R11;

wordaddress=[[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

if(fileDescriptor==-1) then
    backup;
    R1=4;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=wordaddress;
    call MOD_4;
    restore;

else
    if(fileDescriptor<0 || fileDescriptor>7) then
        [([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=-1;
        SP = userSP;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
        ireturn;
    endif;

    if([([pcbEntry+11]+1)*512 -(8-fileDescriptor)*2]==-1 || [([pcbEntry+11]+1)*512 -(8-fileDescriptor)*2]!=FILE) then
        [([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=-1;
        SP = userSP;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
        ireturn;
    endif;

    alias opentableindex R5;
    opentableindex=[([pcbEntry+11]+1)*512 -(8-fileDescriptor)*2+1];

    alias inodeindex R6;
    inodeindex=[OPEN_FILE_TABLE+(opentableindex)*4];

    multipush(R1,R2,R3,R4,R5,R6,R10,R11,R15);
    R1=4;
    R2=inodeindex;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R10,R11,R15);

    if(R0==-1) then
        [([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=-1;
        SP = userSP;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
        ireturn;
    endif;

    alias lseek R7;
    lseek=[OPEN_FILE_TABLE+(opentableindex)*4+2];

    if(inodeindex==INODE_ROOT) then
        if(lseek==480) then
            backup;
            R1=5;
            R2=inodeindex;
            R3=[SYSTEM_STATUS_TABLE+1];
            call MOD_0;
            restore;

            [([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=-2;
            SP = userSP;
            [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
            ireturn;
        endif;

        [[PTBR+2*(wordaddress)/512]*512+(wordaddress)%512]=[ROOT_FILE+lseek];
        [OPEN_FILE_TABLE+(opentableindex)*4+2]=[OPEN_FILE_TABLE+(opentableindex)*4+2]+1;

    else
        if(lseek==[ROOT_FILE+(inodeindex)*8+1]) then
            multipush(R1,R2,R3,R4,R5,R6,R7,R10,R11,R15);
            R1=5;
            R2=inodeindex;
            R3=[SYSTEM_STATUS_TABLE+1];
            call MOD_0;
            multipop(R1,R2,R3,R4,R5,R6,R7,R10,R11,R15);

            [([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=-2;
            SP = userSP;
            [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
            ireturn;
        endif;

        alias blockindex R13;
        blockindex=lseek/512;

        alias diskblocknumber R8;
        diskblocknumber=[INODE_TABLE+(inodeindex)*16+8+blockindex];

        alias offset R9;
        offset=lseek%512;


        backup;
        R1=2;
        R2=diskblocknumber;
        R3=offset;
        R4=wordaddress;
        call MOD_3;
        restore;

        [OPEN_FILE_TABLE+(opentableindex)*4+2]=[OPEN_FILE_TABLE+(opentableindex)*4+2]+1;

        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R13,R15);
        R1=5;
        R2=inodeindex;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R13,R15);
    endif;
SP = userSP;
[([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
endif;
SP = userSP;
[([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)]=0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
