breakpoint;
if(R1==2) then
    alias val R3;
    val=[PROCESS_TABLE+(R2*16)+11];

    alias counter R4;
    counter=1;
    while(counter<=8) do

        if([([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-counter*2]==SEMAPHORE) then
            multipush(R1,R2,R3,R4);
            R1=7;
            R2=[([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-counter*2+1];
            R3=[SYSTEM_STATUS_TABLE+1];
            call MOD_0;
            multipop(R1,R2,R3,R4);
        endif;

        counter=counter+1;
    endwhile;

    multipush(R1,R2,R3);
    R1=2;
    R2=val;
    call MOD_2;
    multipop(R1,R2,R3);
    return;
endif;

if(R1==3) then
alias sav R3;
sav=R2;
multipush(R1,R2,R3);
R1=4;
R2=sav;
call MOD_1;
multipop(R1,R2,R3);
multipush(R1,R2,R3);
R1=2;
R2=sav;
call MOD_1;
multipop(R1,R2,R3);

if([PROCESS_TABLE+(sav*16)+9]!=9) then
    alias counter R4;
    counter=0;
    while(counter<=15) do
        if([PROCESS_TABLE+(counter*16)+4]==WAIT_PROCESS && [PROCESS_TABLE+(counter*16)+5]==sav) then
            [PROCESS_TABLE+(counter*16)+4]=READY;
        endif;

        if([PROCESS_TABLE+(counter*16)+2]==sav) then
            [PROCESS_TABLE+(counter*16)+2]=-1;
        endif;

        counter=counter+1;
    endwhile;
endif;

[PROCESS_TABLE+(sav*16)+4]=TERMINATED;
return;
endif;

if(R1==4) then
alias sav R3;
sav=R2;
alias pageBase R5;
pageBase=[PROCESS_TABLE+(sav*16)+14];

[pageBase+0]=-1;
[pageBase+1]="0000";
[pageBase+2]=-1;
[pageBase+3]="0000";

alias jack R4;
jack=4;
multipush(R1,R2,R3,R4);
while(jack<=18) do
    if([pageBase+jack]!=-1) then
        R1=2;
        R2=[pageBase+jack];
        call MOD_2;
        [pageBase+jack]=-1;
        [pageBase+jack+1]="0000";
        endif;
        jack=jack+2;
endwhile;
multipop(R1,R2,R3,R4);

multipush(R1,R2,R3,R4);
if([DISK_MAP_TABLE+R2*10+2]!=-1) then
    R1=4;
    R3=R2;
    R2=[DISK_MAP_TABLE+R2*10+2];
    call MOD_2;
    endif;
    multipop(R1,R2,R3,R4);
    multipush(R1,R2,R3,R4);

    if([DISK_MAP_TABLE+R2*10+3]!=-1) then
        R1=4;
        R3=R2;
        R2=[DISK_MAP_TABLE+R2*10+2];
        call MOD_2;
    endif;
    multipop(R1,R2,R3,R4);

    multipush(R1,R2,R3,R4);

    if([DISK_MAP_TABLE+R2*10+8]!=-1) then
        R1=4;
        R3=R2;
        R2=[DISK_MAP_TABLE+R2*10+2];
        call MOD_2;
    endif;
    multipop(R1,R2,R3,R4);

    multipush(R1,R2,R3,R4);

    if([DISK_MAP_TABLE+R2*10+9]!=-1) then
        R1=4;
        R3=R2;
        R2=[DISK_MAP_TABLE+R2*10+2];
        call MOD_2;
    endif;
    multipop(R1,R2,R3,R4);

    alias counter R0;
    counter=0;
    while(counter<=9) do
        [DISK_MAP_TABLE+R2*10+counter]=-1;
        counter=counter+1;
    endwhile;
    return;
endif;

if(R1==1) then
    alias counter R4;
    counter=0;
    while(counter<=15) do
            if([PROCESS_TABLE+(counter)*16+4]==TERMINATED) then
                [PROCESS_TABLE+(counter)*16+1]=counter;
                [PROCESS_TABLE+(counter)*16+4]=ALLOCATED;
                [PROCESS_TABLE+(counter)*16+14]=PAGE_TABLE_BASE+(counter)*20;
                [PROCESS_TABLE+(counter)*16+15]=10;
                break;
            endif;
        counter=counter+1;
    endwhile;
if(counter==16) then
    R0=-1;
    return;
endif;

R0=counter;
return;

endif;
