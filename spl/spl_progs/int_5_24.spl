alias syscall R0;
syscall=[[PTBR+2*(SP-5)/512]*512+(SP-5)%512];

alias name_fd R11;
name_fd=[[PTBR+2*(SP-4)/512]*512+(SP-4)%512];

alias pcbEntry R10;
pcbEntry=PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16);

alias userSP R15;
userSP=SP;

[pcbEntry+ 13] = SP;
SP = [pcbEntry + 11] * 512 - 1;

alias userPage R9;
userPage=[pcbEntry+11];

if(syscall==2) then
     [pcbEntry+9]=2;

     alias counter R4;
    counter=1;
    while(counter<=8) do
        if([(userPage+1)*512 -counter*2]==-1) then
            break;
        endif;
        counter=counter+1;
    endwhile;

    //process has reached its limit of resources

    if(counter==9) then
        [pcbEntry+9]=0;
        SP=userSP;
        [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=-3;
        ireturn;
    endif;

    multipush(R11,R10,R15,R9,R4);
    R1=3;
    R2=name_fd;
    call MOD_3;
    //it is not a data file error or file not found

    if(R0==-1) then
        multipop(R11,R10,R15,R9,R4);
        [pcbEntry+9]=0;
        SP=userSP;
        [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=-1;
        ireturn;
    endif;

    //system has reached its limit of open files

    if(R0==-2) then
        multipop(R11,R10,R15,R9,R4);
        [pcbEntry+9]=0;
        SP=userSP;
        [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=-2;
        ireturn;
    endif;


    multipop(R11,R10,R15,R9,R4);
    //setting per-process resource table

    [(userPage+1)*512 -counter*2]=FILE;
    [(userPage+1)*512 -counter*2+1]=R0;

    [pcbEntry+9]=0;
    SP=userSP;
    [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=8-counter;
    ireturn;

endif;

if(syscall==3) then
     [pcbEntry+9]=3;

     //invalid filedescriptor

     if(name_fd<0 || name_fd>7) then
        [pcbEntry+9]=0;
        SP=userSP;
        [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=-1;
        ireturn;
    endif;

    if([(userPage+1)*512 -(8-name_fd)*2]==-1 || [(userPage+1)*512 -(8-name_fd)*2]!=FILE) then
        [pcbEntry+9]=0;
        SP=userSP;
        [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=-1;
        ireturn;
    endif;

    backup;
    R1=4;
    R2=[(userPage+1)*512 -(8-name_fd)*2+1];
    call MOD_3;
    restore;

    [(userPage+1)*512 -(8-name_fd)*2]=-1;
    [(userPage+1)*512 -(8-name_fd)*2+1]=-1;

    [pcbEntry+9]=0;
    SP=userSP;
    [[PTBR+2*(SP-1)/512]*512+(SP-1)%512]=0;
    ireturn;
endif;
