alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
multipush(BP);
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias dup R2;
alias newPID R3;
dup=currentPID;

while([PROCESS_TABLE+(dup+1)*16+4]!=CREATED) do
    if((dup+1)>15) then
        break;
    endif;
    if([PROCESS_TABLE+(dup+1)*16+4]==READY) then
        break;
    endif;
    dup=dup+1;
endwhile;

if((dup+1)<=15) then
    if([PROCESS_TABLE+(dup+1)*16+4]==CREATED) then
        newPID=dup+1;
        alias new_process_table R4;
        new_process_table = PROCESS_TABLE + newPID * 16;

        //Set back Kernel SP, PTBR , PTLR
        SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
        PTBR = [new_process_table + 14];
        PTLR = [new_process_table + 15];

        [SYSTEM_STATUS_TABLE + 1] = newPID;
        [new_process_table + 4] = RUNNING;
        [new_process_table+9]=0;
        SP = [new_process_table + 13];
        ireturn;
    else
        if([PROCESS_TABLE+(dup+1)*16+4]==READY) then
            newPID=dup+1;
            alias new_process_table R4;
            new_process_table = PROCESS_TABLE + newPID * 16;

            //Set back Kernel SP, PTBR , PTLR
            SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
            PTBR = [new_process_table + 14];
            PTLR = [new_process_table + 15];

            [SYSTEM_STATUS_TABLE + 1] = newPID;
            [new_process_table + 4] = RUNNING;
            multipop(BP);
            return;
        endif;
    endif;
else
    newPID=0;
    alias new_process_table R4;
    new_process_table = PROCESS_TABLE + newPID * 16;

    //Set back Kernel SP, PTBR , PTLR
    SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
    PTBR = [new_process_table + 14];
    PTLR = [new_process_table + 15];

    [SYSTEM_STATUS_TABLE + 1] = newPID;
    [new_process_table + 4] = RUNNING;
    multipop(BP);
    return;
endif;
