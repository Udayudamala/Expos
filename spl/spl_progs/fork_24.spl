breakpoint;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=8;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
R1=1;
call MOD_1;
if(R0==-1) then
    [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
    SP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    [[PTBR+(2*(SP-1/512))]+((SP-1)%512)]=R0;
    ireturn;
endif;

multipush(R0);
if([PTBR+4]==-1) then
    R1=1;
    call MOD_2;

    [PTBR+4]=R0;
    [PTBR+5]="1110";

    R1=1;
    call MOD_2;
    [PTBR+6]=R0;
    [PTBR+7]="1110";
endif;
multipop(R0);

alias childPID R9;
childPID=R0;

multipush(R9);
R1=1;
call MOD_2;
multipop(R9);
[PAGE_TABLE_BASE+(childPID*20)+16]=R0;
[PAGE_TABLE_BASE+(childPID*20)+17]="0110";

multipush(R9);
R1=1;
call MOD_2;
multipop(R9);
[PAGE_TABLE_BASE+(childPID*20)+18]=R0;
[PAGE_TABLE_BASE+(childPID*20)+19]="0110";

multipush(R9);
R1=1;
call MOD_2;
multipop(R9);

alias childPrTable R10;
childPrTable=PROCESS_TABLE+(childPID*16);

alias parPrTable R11;
parPrTable=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;

[childPrTable+11]=R0;

[childPrTable+3]=[parPrTable+3];
[childPrTable+6]=[parPrTable+6];
[childPrTable+10]=[parPrTable+10];
[childPrTable+7]=[parPrTable+7];
[childPrTable+13]=[parPrTable+13];

[childPrTable+9]=0;
[childPrTable+12]=0;
[childPrTable+0]=0;

[childPrTable+2]=[SYSTEM_STATUS_TABLE+1];
[childPrTable+4]=CREATED;

alias counter R4;
counter=1;
while(counter<=8) do
    alias saviour R8;
    saviour=([([parPrTable+11]+1)*512-counter*2+1]);
    if([([parPrTable+11]+1)*512-counter*2]==SEMAPHORE) then
        [SEMAPHORE_TABLE+saviour*4+1]=[SEMAPHORE_TABLE+saviour+1]+1;
    endif;

    if([([parPrTable+11]+1)*512-counter*2]==FILE) then
        [OPEN_FILE_TABLE+saviour*4+1]= [OPEN_FILE_TABLE+saviour*4+1]+1;
    endif;

    [(R0+1)*512-counter*2]=[([parPrTable+11]+1)*512-counter*2];
    [(R0+1)*512-counter*2+1]=[([parPrTable+11]+1)*512-counter*2+1];
    counter=counter+1;
endwhile;

counter=0;
while(counter<=9) do
    [DISK_MAP_TABLE+(childPID)*10+counter]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+counter];
    counter=counter+1;
endwhile;

counter=0;
while(counter<=14) do
    if([PTBR+counter]!=-1) then
        [MEMORY_FREE_LIST+[PTBR+counter]]=[MEMORY_FREE_LIST+[PTBR+counter]]+1;
        [PAGE_TABLE_BASE+(childPID)*20+counter]=[PTBR+counter];
        [PAGE_TABLE_BASE+(childPID)*20+counter+1]=[PTBR+counter+1];
        counter=counter+2;
    else
        [PAGE_TABLE_BASE+(childPID)*20+counter]=[PTBR+counter];
        [PAGE_TABLE_BASE+(childPID)*20+counter+1]=[PTBR+counter+1];
        counter=counter+2;
    endif;
endwhile;

alias difference R5;
difference=[parPrTable + 13]-4095;

alias sp R6;
sp=[PROCESS_TABLE+(childPID)*16+13];


alias ptbr R7;
ptbr=[PROCESS_TABLE+(childPID)*16+14];

while(difference>0) do
    [[ptbr+2*(sp-difference+1)/512]*512+(sp-difference+1)%512]=[[PTBR+2*(sp-difference+1)/512]*512+(sp-difference+1)%512];
    difference=difference-1;
endwhile;

[[PROCESS_TABLE+(childPID)*16+11]*512]=BP;

[[ptbr+2*((sp-1)/512)]*512+(sp-1)%512]=0;
[[PTBR+2*((sp-1)/512)]*512+(sp-1)%512]=childPID;

[parPrTable+9]=0;
SP=[parPrTable + 13];
ireturn;
